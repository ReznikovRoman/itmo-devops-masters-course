def merge_sort(array):
    """ Сортировка слиянием (разделяй и властвуй).

    Сложность: O(n log n) в худшем и лучшем случае.
    Устойчивая (при аккуратном слиянии).
    """
    if len(array) <= 1:
        return array
    mid = len(array) // 2
    left = merge_sort(array[:mid])      # сортируем левую половину
    right = merge_sort(array[mid:])     # сортируем правую половину
    return merge(left, right)


def merge(left, right):
    """Слияние двух отсортированных списков в один.

    При равных элементах берём из левой части, обеспечивая устойчивость.
    """
    merged = []
    i, j = 0, 0
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            merged.append(left[i])
            i += 1
        else:
            merged.append(right[j])
            j += 1

    # Добавляем оставшиеся элементы
    merged.extend(left[i:])
    merged.extend(right[j:])
    return merged


data = [5, 1, 3, 2, 4]
sorted_data = merge_sort(data.copy())
print("Merge Sort:", sorted_data)


















"""
Как работает сортировка слиянием?

Разделение: Массив рекурсивно делится на две части, пока не останутся куски длины 1 или 0 
(такие куски считаются уже отсортированными).
Слияние: На этапе слияния берём поэлементно две отсортированные части (левую и правую), сравниваем первые элементы,
перекладывая меньший в итоговый список. При равенстве берём из левой части, что сохраняет исходный порядок равных значений.
Сложность: Постоянное деление и слияние даёт O(n log n).
"""
